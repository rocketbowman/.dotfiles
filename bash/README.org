#+title: Bash Profile org

This file documents my bash configuration. Use org-babel-tangle to
generate my bashrc, bash_profile, and bash_aliases files.

* Bashrc
:PROPERTIES:
:header-args: :tangle ./.bashrc :results silent
:END:
** Autogenerated (Debian)
If I use anything other than Debian, I probably need to update this.

#+begin_src bash

# If not running interactively, don't do anything
case $- in
    ,*i*) ;;
      ,*) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
,*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#+end_src

** Hack to Read Bash Profile
Supposedly, the bash profile is sourced at login. But I don't use a login shell.
I use a login manager. It didn't seem like the bash profile was ever sourced. On
the other hand bashrc is sourced each time you start a terminal which can be
annnoying for paradigms that aren't idempotent. Like PATH=new-path;$PATH.

This hack checks if the READ_PROFILE variable is set. If not, it sources the
bash profile, which then sets it to true.

#+begin_src bash
if [[ -z "$READ_PROFILE" ]]; then
    . ~/.bash_profile
fi
#+end_src

* Bash Profile
:PROPERTIES:
:header-args: :tangle ./.bash_profile :results silent
:END:
** Hack to Read Bash Profile II
#+begin_src bash
export READ_PROFILE=True
#+end_src

** Source Guix Profiles

This block sources the appropriate Guix profiles. The important part of the script
is to source each ./etc/profile script. That sets the appropriate environment
variables that Guix uses. The $HOME/.config profile is the profile for Guix
itself. It controls what version of guix you use and what set of package
repositories you use. The $HOME/.guix-profile profile controls the set
of packages that are installed in a profile.

#+begin_src bash
GUIX_PROFILE="$HOME/.config/guix/current"
. "$GUIX_PROFILE/etc/profile"
GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"
#+end_src
** SSL certificates

Set CA Certificate environement variables so we can use TLS. First, install
the guix package `nss-certs` to get the certificates. Why do we need to set
environment variables? Most SSL clients use a location in root. But Guix
is oriented for unprivileged package management. In order to use
user-installed certificates, SSL clients allow use specific environment
variables to override the default certificate location. More information about
Guix SSL certs can be found here:
https://guix.gnu.org/manual/en/html_node/X_002e509-Certificates.html#X_002e509-Certificates

#+begin_src bash
export SSL_CERT_DIR="$HOME/.guix-profile/etc/ssl/certs"
export SSL_CERT_FILE="$HOME/.guix-profile/etc/ssl/certs/ca-certificates.crt"
export GIT_SSL_CAINFO="$SSL_CERT_FILE"
#+end_src

* Bash Aliases
:PROPERTIES:
:header-args: :tangle ./.bash_aliases :results silent
:END:

#+begin_src bash
alias emc="emacsclient -c -a 'vim' &"
alias emacsd="/home/kyle/.guix-profile/bin/emacs --daemon"
#+end_src
